!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/tiago/tmp/blog/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	5.9.0	/p5.9.20220828.0/
APP_PATH	bin/rails	/^APP_PATH = File.expand_path('..\/config\/application', __dir__)$/;"	C
APP_ROOT	bin/setup	/^APP_ROOT = File.expand_path('..', __dir__)$/;"	C
Application	config/application.rb	/^  class Application < Rails::Application$/;"	c	module:Blog
ApplicationCable	app/channels/application_cable/channel.rb	/^module ApplicationCable$/;"	m
ApplicationCable	app/channels/application_cable/connection.rb	/^module ApplicationCable$/;"	m
ApplicationController	app/controllers/application_controller.rb	/^class ApplicationController < ActionController::Base$/;"	c
ApplicationHelper	app/helpers/application_helper.rb	/^module ApplicationHelper$/;"	m
ApplicationJob	app/jobs/application_job.rb	/^class ApplicationJob < ActiveJob::Base$/;"	c
ApplicationMailer	app/mailers/application_mailer.rb	/^class ApplicationMailer < ActionMailer::Base$/;"	c
BaseArgument	app/graphql/types/base_argument.rb	/^  class BaseArgument < GraphQL::Schema::Argument$/;"	c	module:Types
BaseConnection	app/graphql/types/base_connection.rb	/^  class BaseConnection < Types::BaseObject$/;"	c	module:Types	mixin:include:GraphQL.Types.Relay.ConnectionBehaviors
BaseEdge	app/graphql/types/base_edge.rb	/^  class BaseEdge < Types::BaseObject$/;"	c	module:Types	mixin:include:GraphQL.Types.Relay.EdgeBehaviors
BaseEnum	app/graphql/types/base_enum.rb	/^  class BaseEnum < GraphQL::Schema::Enum$/;"	c	module:Types
BaseField	app/graphql/types/base_field.rb	/^  class BaseField < GraphQL::Schema::Field$/;"	c	module:Types
BaseInputObject	app/graphql/types/base_input_object.rb	/^  class BaseInputObject < GraphQL::Schema::InputObject$/;"	c	module:Types
BaseInterface	app/graphql/types/base_interface.rb	/^  module BaseInterface$/;"	m	module:Types	mixin:include:GraphQL.Schema.Interface
BaseMutation	app/graphql/mutations/base_mutation.rb	/^  class BaseMutation < GraphQL::Schema::RelayClassicMutation$/;"	c	module:Mutations
BaseObject	app/graphql/types/base_object.rb	/^  class BaseObject < GraphQL::Schema::Object$/;"	c	module:Types
BaseScalar	app/graphql/types/base_scalar.rb	/^  class BaseScalar < GraphQL::Schema::Scalar$/;"	c	module:Types
BaseUnion	app/graphql/types/base_union.rb	/^  class BaseUnion < GraphQL::Schema::Union$/;"	c	module:Types
Blog	config/application.rb	/^module Blog$/;"	m
BlogSchema	app/graphql/blog_schema.rb	/^class BlogSchema < GraphQL::Schema$/;"	c
Channel	app/channels/application_cable/channel.rb	/^  class Channel < ActionCable::Channel::Base$/;"	c	module:ApplicationCable
Comment	app/models/comment.rb	/^class Comment$/;"	c	mixin:include:Mongoid.Document,include:Mongoid.Timestamps
Comment type	spec/app/models/comment_spec.rb	/^RSpec.describe Comment, type: :model do$/;"	d
CommentType	app/graphql/types/comment_type.rb	/^  class CommentType < Types::BaseObject$/;"	c	module:Types
CommentsController	app/controllers/comments_controller.rb	/^class CommentsController < ApplicationController$/;"	c
CommentsHelper	app/helpers/comments_helper.rb	/^module CommentsHelper$/;"	m
Connection	app/channels/application_cable/connection.rb	/^  class Connection < ActionCable::Connection::Base$/;"	c	module:ApplicationCable
CreatePost	app/graphql/mutations/create_post.rb	/^  class CreatePost < Mutations::BaseMutation$/;"	c	module:Mutations
GraphqlController	app/controllers/graphql_controller.rb	/^class GraphqlController < ApplicationController$/;"	c
MutationType	app/graphql/types/mutation_type.rb	/^  class MutationType < Types::BaseObject$/;"	c	module:Types
Mutations	app/graphql/mutations/base_mutation.rb	/^module Mutations$/;"	m
Mutations	app/graphql/mutations/create_post.rb	/^module Mutations$/;"	m
NodeType	app/graphql/types/node_type.rb	/^  module NodeType$/;"	m	module:Types	mixin:include:Types.BaseInterface,include:GraphQL.Types.Relay.NodeBehaviors
Post	app/models/post.rb	/^class Post$/;"	c	mixin:include:Mongoid.Document,include:Mongoid.Timestamps
PostType	app/graphql/types/post_type.rb	/^    class PostType < BaseObject$/;"	c	module:Types.Types
PostsController	app/controllers/posts_controller.rb	/^class PostsController < ApplicationController$/;"	c
PostsHelper	app/helpers/posts_helper.rb	/^module PostsHelper$/;"	m
QueryType	app/graphql/types/query_type.rb	/^  class QueryType < Types::BaseObject$/;"	c	module:Types	mixin:include:GraphQL.Types.Relay.HasNodeField,include:GraphQL.Types.Relay.HasNodesField
README	README.md	/^# README$/;"	c
The change you wanted was rejected (422)	public/422.html	/^  <title>The change you wanted was rejected (422)<\/title>$/;"	j
The change you wanted was rejected.	public/422.html	/^      <h1>The change you wanted was rejected.<\/h1>$/;"	h
The page you were looking for doesn't exist (404)	public/404.html	/^  <title>The page you were looking for doesn't exist (404)<\/title>$/;"	j
The page you were looking for doesn't exist.	public/404.html	/^      <h1>The page you were looking for doesn't exist.<\/h1>$/;"	h
Types	app/graphql/types/base_argument.rb	/^module Types$/;"	m
Types	app/graphql/types/base_connection.rb	/^module Types$/;"	m
Types	app/graphql/types/base_edge.rb	/^module Types$/;"	m
Types	app/graphql/types/base_enum.rb	/^module Types$/;"	m
Types	app/graphql/types/base_field.rb	/^module Types$/;"	m
Types	app/graphql/types/base_input_object.rb	/^module Types$/;"	m
Types	app/graphql/types/base_interface.rb	/^module Types$/;"	m
Types	app/graphql/types/base_object.rb	/^module Types$/;"	m
Types	app/graphql/types/base_scalar.rb	/^module Types$/;"	m
Types	app/graphql/types/base_union.rb	/^module Types$/;"	m
Types	app/graphql/types/comment_type.rb	/^module Types$/;"	m
Types	app/graphql/types/mutation_type.rb	/^module Types$/;"	m
Types	app/graphql/types/node_type.rb	/^module Types$/;"	m
Types	app/graphql/types/post_type.rb	/^  module Types$/;"	m	module:Types
Types	app/graphql/types/post_type.rb	/^module Types$/;"	m
Types	app/graphql/types/query_type.rb	/^module Types$/;"	m
We're sorry, but something went wrong (500)	public/500.html	/^  <title>We're sorry, but something went wrong (500)<\/title>$/;"	j
We're sorry, but something went wrong.	public/500.html	/^      <h1>We're sorry, but something went wrong.<\/h1>$/;"	h
comment_params	app/controllers/comments_controller.rb	/^  def comment_params$/;"	f	class:CommentsController
comments	app/graphql/types/query_type.rb	/^    def comments$/;"	f	class:Types.QueryType
create	app/controllers/comments_controller.rb	/^  def create$/;"	f	class:CommentsController
create	app/controllers/posts_controller.rb	/^  def create$/;"	f	class:PostsController
destroy	app/controllers/comments_controller.rb	/^  def destroy$/;"	f	class:CommentsController
destroy	app/controllers/posts_controller.rb	/^  def destroy$/;"	f	class:PostsController
edit	app/controllers/comments_controller.rb	/^  def edit; end$/;"	f	class:CommentsController
edit	app/controllers/posts_controller.rb	/^  def edit; end$/;"	f	class:PostsController
execute	app/controllers/graphql_controller.rb	/^  def execute$/;"	f	class:GraphqlController
handle_error_in_development	app/controllers/graphql_controller.rb	/^  def handle_error_in_development(e)$/;"	f	class:GraphqlController
id_from_object	app/graphql/blog_schema.rb	/^  def self.id_from_object(object, _type_definition, _query_ctx)$/;"	S	class:BlogSchema
index	app/controllers/comments_controller.rb	/^  def index$/;"	f	class:CommentsController
index	app/controllers/posts_controller.rb	/^  def index$/;"	f	class:PostsController
new	app/controllers/comments_controller.rb	/^  def new$/;"	f	class:CommentsController
new	app/controllers/posts_controller.rb	/^  def new$/;"	f	class:PostsController
object_from_id	app/graphql/blog_schema.rb	/^  def self.object_from_id(global_id, _query_ctx)$/;"	S	class:BlogSchema
post	app/graphql/types/query_type.rb	/^    def post(id:)$/;"	f	class:Types.QueryType
post_params	app/controllers/posts_controller.rb	/^  def post_params$/;"	f	class:PostsController
posts	app/graphql/types/query_type.rb	/^    def posts$/;"	f	class:Types.QueryType
prepare_variables	app/controllers/graphql_controller.rb	/^  def prepare_variables(variables_param)$/;"	f	class:GraphqlController
resolve	app/graphql/mutations/create_post.rb	/^    def resolve(title:, body:)$/;"	f	class:Mutations.CreatePost
resolve_type	app/graphql/blog_schema.rb	/^  def self.resolve_type(_abstract_type, _obj, _ctx)$/;"	S	class:BlogSchema
set_comment	app/controllers/comments_controller.rb	/^  def set_comment$/;"	f	class:CommentsController
set_post	app/controllers/posts_controller.rb	/^  def set_post$/;"	f	class:PostsController
show	app/controllers/comments_controller.rb	/^  def show; end$/;"	f	class:CommentsController
show	app/controllers/posts_controller.rb	/^  def show; end$/;"	f	class:PostsController
system!	bin/setup	/^def system!(*args)$/;"	f
update	app/controllers/comments_controller.rb	/^  def update$/;"	f	class:CommentsController
update	app/controllers/posts_controller.rb	/^  def update$/;"	f	class:PostsController
when new comment is created	spec/app/models/comment_spec.rb	/^  context 'when new comment is created' do$/;"	c	describe:Comment type
will increase Comment count	spec/app/models/comment_spec.rb	/^    it 'will increase Comment count' do$/;"	i	context:Comment type.when new comment is created
